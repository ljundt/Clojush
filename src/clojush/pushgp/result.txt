Command line args: clojush.problems.demos.odd
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (code_atom code_car integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove code_eq exec_y boolean_yank integer_eq code_contains code_do*count integer_mult code_length boolean_or code_position boolean_empty code_cdr exec_do*while code_list code_swap exec_dup_items boolean_dup_items exec_empty exec_rot code_pop code_subst exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times code_quote boolean_shove boolean_rot integer_div integer_lte integer_mod code_null exec_do*count integer_rot integer_add integer_shove integer_max code_wrap code_flush code_append code_yankdup code_rot integer_stackdepth code_dup_times integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap code_do*range code_dup_items integer_dup_items code_do* exec_do*range exec_if code_frominteger boolean_invert_first_then_and integer_fromboolean code_do boolean_frominteger code_map boolean_eq integer_flush integer_gt code_dup boolean_not code_if exec_do*times code_nthcdr exec_pop code_extract code_stackdepth exec_s code_do*times code_noop code_yank integer_lt exec_noop code_size integer_swap integer_dup exec_yank integer_pop integer_empty code_empty integer_dec code_cons code_member exec_stackdepth boolean_and exec_flush exec_when code_insert code_fromboolean code_shove boolean_invert_second_then_and code_container code_nth boolean_yankdup #object[clojush.problems.demos.odd$fn__6243 0x39c8704e clojush.problems.demos.odd$fn__6243@39c8704e] in1)
error-function = #object[clojush.problems.demos.odd$fn__6227 0x17f1292f clojush.problems.demos.odd$fn__6227@17f1292f]
max-generations = 3
parent-selection = :novelty-lexicase
use-single-thread = true
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.8.0-1-SNAPSHOTHash of last Git commit = 01c00a99f6cc73b5220a4182ef6612809f0edeff
GitHub link = https://github.com/lspector/Clojush/commit/01c00a99f6cc73b5220a4182ef6612809f0edeff
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (code_atom code_car integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove code_eq exec_y boolean_yank integer_eq code_contains code_do*count integer_mult code_length boolean_or code_position boolean_empty code_cdr exec_do*while code_list code_swap exec_dup_items boolean_dup_items exec_empty exec_rot code_pop code_subst exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times code_quote boolean_shove boolean_rot integer_div integer_lte integer_mod code_null exec_do*count integer_rot integer_add integer_shove integer_max code_wrap code_flush code_append code_yankdup code_rot integer_stackdepth code_dup_times integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap code_do*range code_dup_items integer_dup_items code_do* exec_do*range exec_if code_frominteger boolean_invert_first_then_and integer_fromboolean code_do boolean_frominteger code_map boolean_eq integer_flush integer_gt code_dup boolean_not code_if exec_do*times code_nthcdr exec_pop code_extract code_stackdepth exec_s code_do*times code_noop code_yank integer_lt exec_noop code_size integer_swap integer_dup exec_yank integer_pop integer_empty code_empty integer_dec code_cons code_member exec_stackdepth boolean_and exec_flush exec_when code_insert code_fromboolean code_shove boolean_invert_second_then_and code_container code_nth boolean_yankdup #object[clojush.problems.demos.odd$fn__6243 0x39c8704e clojush.problems.demos.odd$fn__6243@39c8704e] in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.demos.odd$fn__6227 0x17f1292f clojush.problems.demos.odd$fn__6227@17f1292f]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :uniform-combination-and-deletion 0.0, :uniform-addition-and-deletion 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :genesis 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 3
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :novelty-lexicase
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0xc1e3b8b clojush.pushgp.report$default_problem_specific_initial_report@c1e3b8b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x39bd9b6c clojush.pushgp.report$default_problem_specific_report@39bd9b6c]
random-screen = false
random-seed = -9 -71 -123 -66 39 45 -92 -59 -82 -8 64 -122 -74 114 -106 -109
random-threshold-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = true
Lia Version

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.
Calculating lexicase novelty...nilnilfirst pop
#object[clojure.lang.Atom 0x554c0017 {:status :ready, :val #clojush.individual.individual{:genome [{:close 0, :instruction code_rot} {:close 0, :instruction code_position} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction code_list} {:close 1, :instruction code_dup_items} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 1, :instruction code_insert} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction code_null} {:close 0, :instruction code_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction code_append} {:close 0, :instruction integer_mod} {:close 0, :instruction code_list} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction code_atom} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction code_do*count} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction code_null} {:close 0, :instruction integer_pop} {:close 0, :instruction code_quote} {:close 1, :instruction code_empty} {:close 0, :instruction code_yankdup} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_gt} {:close 1, :instruction code_nth} {:close 0, :instruction code_if} {:close 0, :instruction code_car} {:close 0, :instruction code_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction code_if} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction code_append} {:close 0, :instruction code_append}], :program (code_rot code_position boolean_dup integer_min code_list code_dup_items exec_dup () boolean_dup_items boolean_eq code_insert boolean_frominteger code_null code_dup_items boolean_shove exec_noop exec_pop () code_append integer_mod code_list integer_dup boolean_dup code_atom boolean_or integer_rot integer_dec code_do*count exec_dup (integer_fromboolean) boolean_invert_first_then_and code_null integer_pop code_quote (code_empty) code_yankdup integer_gte integer_gt code_nth code_if code_car code_do*count integer_stackdepth boolean_invert_first_then_and code_if integer_mult boolean_dup_items integer_flush code_append code_append), :errors [1000 1000 1000 1000 1000 1000 1000 1000 1000 1000], :behaviors nil, :total-error 10000, :normalized-error 10000, :weighted-error nil, :novelty nil, :meta-errors [], :history nil, :ancestors nil, :uuid #uuid "0ab783da-aab6-47bc-9d83-52e5342e7982", :parent-uuids nil, :genetic-operators :random, :age 0, :grain-size 1, :is-random-replacement false}}]
